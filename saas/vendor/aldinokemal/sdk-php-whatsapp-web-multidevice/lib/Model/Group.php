<?php
/**
 * Group
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  SdkWhatsappWebMultiDevice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhatsApp API MultiDevice
 *
 * This API is used for sending whatsapp via API
 *
 * The version of the OpenAPI document: 5.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SdkWhatsappWebMultiDevice\Model;

use \ArrayAccess;
use \SdkWhatsappWebMultiDevice\ObjectSerializer;

/**
 * Group Class Doc Comment
 *
 * @category Class
 * @package  SdkWhatsappWebMultiDevice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Group implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Group';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'jid' => 'string',
        'owner_jid' => 'string',
        'name' => 'string',
        'name_set_at' => '\DateTime',
        'name_set_by' => 'string',
        'topic' => 'string',
        'topic_id' => 'string',
        'topic_set_at' => '\DateTime',
        'topic_set_by' => 'string',
        'topic_deleted' => 'bool',
        'is_locked' => 'bool',
        'is_announce' => 'bool',
        'announce_version_id' => 'string',
        'is_ephemeral' => 'bool',
        'disappearing_timer' => 'int',
        'is_incognito' => 'bool',
        'is_parent' => 'bool',
        'default_membership_approval_mode' => 'string',
        'linked_parent_jid' => 'string',
        'is_default_sub_group' => 'bool',
        'is_join_approval_required' => 'bool',
        'group_created' => '\DateTime',
        'participant_version_id' => 'string',
        'participants' => '\SdkWhatsappWebMultiDevice\Model\Participant[]',
        'member_add_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'jid' => null,
        'owner_jid' => null,
        'name' => null,
        'name_set_at' => 'date-time',
        'name_set_by' => null,
        'topic' => null,
        'topic_id' => null,
        'topic_set_at' => 'date-time',
        'topic_set_by' => null,
        'topic_deleted' => null,
        'is_locked' => null,
        'is_announce' => null,
        'announce_version_id' => null,
        'is_ephemeral' => null,
        'disappearing_timer' => null,
        'is_incognito' => null,
        'is_parent' => null,
        'default_membership_approval_mode' => null,
        'linked_parent_jid' => null,
        'is_default_sub_group' => null,
        'is_join_approval_required' => null,
        'group_created' => 'date-time',
        'participant_version_id' => null,
        'participants' => null,
        'member_add_mode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'jid' => false,
        'owner_jid' => false,
        'name' => false,
        'name_set_at' => false,
        'name_set_by' => false,
        'topic' => false,
        'topic_id' => false,
        'topic_set_at' => false,
        'topic_set_by' => false,
        'topic_deleted' => false,
        'is_locked' => false,
        'is_announce' => false,
        'announce_version_id' => false,
        'is_ephemeral' => false,
        'disappearing_timer' => false,
        'is_incognito' => false,
        'is_parent' => false,
        'default_membership_approval_mode' => false,
        'linked_parent_jid' => false,
        'is_default_sub_group' => false,
        'is_join_approval_required' => false,
        'group_created' => false,
        'participant_version_id' => false,
        'participants' => false,
        'member_add_mode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jid' => 'JID',
        'owner_jid' => 'OwnerJID',
        'name' => 'Name',
        'name_set_at' => 'NameSetAt',
        'name_set_by' => 'NameSetBy',
        'topic' => 'Topic',
        'topic_id' => 'TopicID',
        'topic_set_at' => 'TopicSetAt',
        'topic_set_by' => 'TopicSetBy',
        'topic_deleted' => 'TopicDeleted',
        'is_locked' => 'IsLocked',
        'is_announce' => 'IsAnnounce',
        'announce_version_id' => 'AnnounceVersionID',
        'is_ephemeral' => 'IsEphemeral',
        'disappearing_timer' => 'DisappearingTimer',
        'is_incognito' => 'IsIncognito',
        'is_parent' => 'IsParent',
        'default_membership_approval_mode' => 'DefaultMembershipApprovalMode',
        'linked_parent_jid' => 'LinkedParentJID',
        'is_default_sub_group' => 'IsDefaultSubGroup',
        'is_join_approval_required' => 'IsJoinApprovalRequired',
        'group_created' => 'GroupCreated',
        'participant_version_id' => 'ParticipantVersionID',
        'participants' => 'Participants',
        'member_add_mode' => 'MemberAddMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jid' => 'setJid',
        'owner_jid' => 'setOwnerJid',
        'name' => 'setName',
        'name_set_at' => 'setNameSetAt',
        'name_set_by' => 'setNameSetBy',
        'topic' => 'setTopic',
        'topic_id' => 'setTopicId',
        'topic_set_at' => 'setTopicSetAt',
        'topic_set_by' => 'setTopicSetBy',
        'topic_deleted' => 'setTopicDeleted',
        'is_locked' => 'setIsLocked',
        'is_announce' => 'setIsAnnounce',
        'announce_version_id' => 'setAnnounceVersionId',
        'is_ephemeral' => 'setIsEphemeral',
        'disappearing_timer' => 'setDisappearingTimer',
        'is_incognito' => 'setIsIncognito',
        'is_parent' => 'setIsParent',
        'default_membership_approval_mode' => 'setDefaultMembershipApprovalMode',
        'linked_parent_jid' => 'setLinkedParentJid',
        'is_default_sub_group' => 'setIsDefaultSubGroup',
        'is_join_approval_required' => 'setIsJoinApprovalRequired',
        'group_created' => 'setGroupCreated',
        'participant_version_id' => 'setParticipantVersionId',
        'participants' => 'setParticipants',
        'member_add_mode' => 'setMemberAddMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jid' => 'getJid',
        'owner_jid' => 'getOwnerJid',
        'name' => 'getName',
        'name_set_at' => 'getNameSetAt',
        'name_set_by' => 'getNameSetBy',
        'topic' => 'getTopic',
        'topic_id' => 'getTopicId',
        'topic_set_at' => 'getTopicSetAt',
        'topic_set_by' => 'getTopicSetBy',
        'topic_deleted' => 'getTopicDeleted',
        'is_locked' => 'getIsLocked',
        'is_announce' => 'getIsAnnounce',
        'announce_version_id' => 'getAnnounceVersionId',
        'is_ephemeral' => 'getIsEphemeral',
        'disappearing_timer' => 'getDisappearingTimer',
        'is_incognito' => 'getIsIncognito',
        'is_parent' => 'getIsParent',
        'default_membership_approval_mode' => 'getDefaultMembershipApprovalMode',
        'linked_parent_jid' => 'getLinkedParentJid',
        'is_default_sub_group' => 'getIsDefaultSubGroup',
        'is_join_approval_required' => 'getIsJoinApprovalRequired',
        'group_created' => 'getGroupCreated',
        'participant_version_id' => 'getParticipantVersionId',
        'participants' => 'getParticipants',
        'member_add_mode' => 'getMemberAddMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('jid', $data ?? [], null);
        $this->setIfExists('owner_jid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('name_set_at', $data ?? [], null);
        $this->setIfExists('name_set_by', $data ?? [], null);
        $this->setIfExists('topic', $data ?? [], null);
        $this->setIfExists('topic_id', $data ?? [], null);
        $this->setIfExists('topic_set_at', $data ?? [], null);
        $this->setIfExists('topic_set_by', $data ?? [], null);
        $this->setIfExists('topic_deleted', $data ?? [], null);
        $this->setIfExists('is_locked', $data ?? [], null);
        $this->setIfExists('is_announce', $data ?? [], null);
        $this->setIfExists('announce_version_id', $data ?? [], null);
        $this->setIfExists('is_ephemeral', $data ?? [], null);
        $this->setIfExists('disappearing_timer', $data ?? [], null);
        $this->setIfExists('is_incognito', $data ?? [], null);
        $this->setIfExists('is_parent', $data ?? [], null);
        $this->setIfExists('default_membership_approval_mode', $data ?? [], null);
        $this->setIfExists('linked_parent_jid', $data ?? [], null);
        $this->setIfExists('is_default_sub_group', $data ?? [], null);
        $this->setIfExists('is_join_approval_required', $data ?? [], null);
        $this->setIfExists('group_created', $data ?? [], null);
        $this->setIfExists('participant_version_id', $data ?? [], null);
        $this->setIfExists('participants', $data ?? [], null);
        $this->setIfExists('member_add_mode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jid
     *
     * @return string|null
     */
    public function getJid()
    {
        return $this->container['jid'];
    }

    /**
     * Sets jid
     *
     * @param string|null $jid jid
     *
     * @return self
     */
    public function setJid($jid)
    {
        if (is_null($jid)) {
            throw new \InvalidArgumentException('non-nullable jid cannot be null');
        }
        $this->container['jid'] = $jid;

        return $this;
    }

    /**
     * Gets owner_jid
     *
     * @return string|null
     */
    public function getOwnerJid()
    {
        return $this->container['owner_jid'];
    }

    /**
     * Sets owner_jid
     *
     * @param string|null $owner_jid owner_jid
     *
     * @return self
     */
    public function setOwnerJid($owner_jid)
    {
        if (is_null($owner_jid)) {
            throw new \InvalidArgumentException('non-nullable owner_jid cannot be null');
        }
        $this->container['owner_jid'] = $owner_jid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_set_at
     *
     * @return \DateTime|null
     */
    public function getNameSetAt()
    {
        return $this->container['name_set_at'];
    }

    /**
     * Sets name_set_at
     *
     * @param \DateTime|null $name_set_at name_set_at
     *
     * @return self
     */
    public function setNameSetAt($name_set_at)
    {
        if (is_null($name_set_at)) {
            throw new \InvalidArgumentException('non-nullable name_set_at cannot be null');
        }
        $this->container['name_set_at'] = $name_set_at;

        return $this;
    }

    /**
     * Gets name_set_by
     *
     * @return string|null
     */
    public function getNameSetBy()
    {
        return $this->container['name_set_by'];
    }

    /**
     * Sets name_set_by
     *
     * @param string|null $name_set_by name_set_by
     *
     * @return self
     */
    public function setNameSetBy($name_set_by)
    {
        if (is_null($name_set_by)) {
            throw new \InvalidArgumentException('non-nullable name_set_by cannot be null');
        }
        $this->container['name_set_by'] = $name_set_by;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return string|null
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param string|null $topic topic
     *
     * @return self
     */
    public function setTopic($topic)
    {
        if (is_null($topic)) {
            throw new \InvalidArgumentException('non-nullable topic cannot be null');
        }
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets topic_id
     *
     * @return string|null
     */
    public function getTopicId()
    {
        return $this->container['topic_id'];
    }

    /**
     * Sets topic_id
     *
     * @param string|null $topic_id topic_id
     *
     * @return self
     */
    public function setTopicId($topic_id)
    {
        if (is_null($topic_id)) {
            throw new \InvalidArgumentException('non-nullable topic_id cannot be null');
        }
        $this->container['topic_id'] = $topic_id;

        return $this;
    }

    /**
     * Gets topic_set_at
     *
     * @return \DateTime|null
     */
    public function getTopicSetAt()
    {
        return $this->container['topic_set_at'];
    }

    /**
     * Sets topic_set_at
     *
     * @param \DateTime|null $topic_set_at topic_set_at
     *
     * @return self
     */
    public function setTopicSetAt($topic_set_at)
    {
        if (is_null($topic_set_at)) {
            throw new \InvalidArgumentException('non-nullable topic_set_at cannot be null');
        }
        $this->container['topic_set_at'] = $topic_set_at;

        return $this;
    }

    /**
     * Gets topic_set_by
     *
     * @return string|null
     */
    public function getTopicSetBy()
    {
        return $this->container['topic_set_by'];
    }

    /**
     * Sets topic_set_by
     *
     * @param string|null $topic_set_by topic_set_by
     *
     * @return self
     */
    public function setTopicSetBy($topic_set_by)
    {
        if (is_null($topic_set_by)) {
            throw new \InvalidArgumentException('non-nullable topic_set_by cannot be null');
        }
        $this->container['topic_set_by'] = $topic_set_by;

        return $this;
    }

    /**
     * Gets topic_deleted
     *
     * @return bool|null
     */
    public function getTopicDeleted()
    {
        return $this->container['topic_deleted'];
    }

    /**
     * Sets topic_deleted
     *
     * @param bool|null $topic_deleted topic_deleted
     *
     * @return self
     */
    public function setTopicDeleted($topic_deleted)
    {
        if (is_null($topic_deleted)) {
            throw new \InvalidArgumentException('non-nullable topic_deleted cannot be null');
        }
        $this->container['topic_deleted'] = $topic_deleted;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool|null
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool|null $is_locked is_locked
     *
     * @return self
     */
    public function setIsLocked($is_locked)
    {
        if (is_null($is_locked)) {
            throw new \InvalidArgumentException('non-nullable is_locked cannot be null');
        }
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets is_announce
     *
     * @return bool|null
     */
    public function getIsAnnounce()
    {
        return $this->container['is_announce'];
    }

    /**
     * Sets is_announce
     *
     * @param bool|null $is_announce is_announce
     *
     * @return self
     */
    public function setIsAnnounce($is_announce)
    {
        if (is_null($is_announce)) {
            throw new \InvalidArgumentException('non-nullable is_announce cannot be null');
        }
        $this->container['is_announce'] = $is_announce;

        return $this;
    }

    /**
     * Gets announce_version_id
     *
     * @return string|null
     */
    public function getAnnounceVersionId()
    {
        return $this->container['announce_version_id'];
    }

    /**
     * Sets announce_version_id
     *
     * @param string|null $announce_version_id announce_version_id
     *
     * @return self
     */
    public function setAnnounceVersionId($announce_version_id)
    {
        if (is_null($announce_version_id)) {
            throw new \InvalidArgumentException('non-nullable announce_version_id cannot be null');
        }
        $this->container['announce_version_id'] = $announce_version_id;

        return $this;
    }

    /**
     * Gets is_ephemeral
     *
     * @return bool|null
     */
    public function getIsEphemeral()
    {
        return $this->container['is_ephemeral'];
    }

    /**
     * Sets is_ephemeral
     *
     * @param bool|null $is_ephemeral is_ephemeral
     *
     * @return self
     */
    public function setIsEphemeral($is_ephemeral)
    {
        if (is_null($is_ephemeral)) {
            throw new \InvalidArgumentException('non-nullable is_ephemeral cannot be null');
        }
        $this->container['is_ephemeral'] = $is_ephemeral;

        return $this;
    }

    /**
     * Gets disappearing_timer
     *
     * @return int|null
     */
    public function getDisappearingTimer()
    {
        return $this->container['disappearing_timer'];
    }

    /**
     * Sets disappearing_timer
     *
     * @param int|null $disappearing_timer disappearing_timer
     *
     * @return self
     */
    public function setDisappearingTimer($disappearing_timer)
    {
        if (is_null($disappearing_timer)) {
            throw new \InvalidArgumentException('non-nullable disappearing_timer cannot be null');
        }
        $this->container['disappearing_timer'] = $disappearing_timer;

        return $this;
    }

    /**
     * Gets is_incognito
     *
     * @return bool|null
     */
    public function getIsIncognito()
    {
        return $this->container['is_incognito'];
    }

    /**
     * Sets is_incognito
     *
     * @param bool|null $is_incognito is_incognito
     *
     * @return self
     */
    public function setIsIncognito($is_incognito)
    {
        if (is_null($is_incognito)) {
            throw new \InvalidArgumentException('non-nullable is_incognito cannot be null');
        }
        $this->container['is_incognito'] = $is_incognito;

        return $this;
    }

    /**
     * Gets is_parent
     *
     * @return bool|null
     */
    public function getIsParent()
    {
        return $this->container['is_parent'];
    }

    /**
     * Sets is_parent
     *
     * @param bool|null $is_parent is_parent
     *
     * @return self
     */
    public function setIsParent($is_parent)
    {
        if (is_null($is_parent)) {
            throw new \InvalidArgumentException('non-nullable is_parent cannot be null');
        }
        $this->container['is_parent'] = $is_parent;

        return $this;
    }

    /**
     * Gets default_membership_approval_mode
     *
     * @return string|null
     */
    public function getDefaultMembershipApprovalMode()
    {
        return $this->container['default_membership_approval_mode'];
    }

    /**
     * Sets default_membership_approval_mode
     *
     * @param string|null $default_membership_approval_mode default_membership_approval_mode
     *
     * @return self
     */
    public function setDefaultMembershipApprovalMode($default_membership_approval_mode)
    {
        if (is_null($default_membership_approval_mode)) {
            throw new \InvalidArgumentException('non-nullable default_membership_approval_mode cannot be null');
        }
        $this->container['default_membership_approval_mode'] = $default_membership_approval_mode;

        return $this;
    }

    /**
     * Gets linked_parent_jid
     *
     * @return string|null
     */
    public function getLinkedParentJid()
    {
        return $this->container['linked_parent_jid'];
    }

    /**
     * Sets linked_parent_jid
     *
     * @param string|null $linked_parent_jid linked_parent_jid
     *
     * @return self
     */
    public function setLinkedParentJid($linked_parent_jid)
    {
        if (is_null($linked_parent_jid)) {
            throw new \InvalidArgumentException('non-nullable linked_parent_jid cannot be null');
        }
        $this->container['linked_parent_jid'] = $linked_parent_jid;

        return $this;
    }

    /**
     * Gets is_default_sub_group
     *
     * @return bool|null
     */
    public function getIsDefaultSubGroup()
    {
        return $this->container['is_default_sub_group'];
    }

    /**
     * Sets is_default_sub_group
     *
     * @param bool|null $is_default_sub_group is_default_sub_group
     *
     * @return self
     */
    public function setIsDefaultSubGroup($is_default_sub_group)
    {
        if (is_null($is_default_sub_group)) {
            throw new \InvalidArgumentException('non-nullable is_default_sub_group cannot be null');
        }
        $this->container['is_default_sub_group'] = $is_default_sub_group;

        return $this;
    }

    /**
     * Gets is_join_approval_required
     *
     * @return bool|null
     */
    public function getIsJoinApprovalRequired()
    {
        return $this->container['is_join_approval_required'];
    }

    /**
     * Sets is_join_approval_required
     *
     * @param bool|null $is_join_approval_required is_join_approval_required
     *
     * @return self
     */
    public function setIsJoinApprovalRequired($is_join_approval_required)
    {
        if (is_null($is_join_approval_required)) {
            throw new \InvalidArgumentException('non-nullable is_join_approval_required cannot be null');
        }
        $this->container['is_join_approval_required'] = $is_join_approval_required;

        return $this;
    }

    /**
     * Gets group_created
     *
     * @return \DateTime|null
     */
    public function getGroupCreated()
    {
        return $this->container['group_created'];
    }

    /**
     * Sets group_created
     *
     * @param \DateTime|null $group_created group_created
     *
     * @return self
     */
    public function setGroupCreated($group_created)
    {
        if (is_null($group_created)) {
            throw new \InvalidArgumentException('non-nullable group_created cannot be null');
        }
        $this->container['group_created'] = $group_created;

        return $this;
    }

    /**
     * Gets participant_version_id
     *
     * @return string|null
     */
    public function getParticipantVersionId()
    {
        return $this->container['participant_version_id'];
    }

    /**
     * Sets participant_version_id
     *
     * @param string|null $participant_version_id participant_version_id
     *
     * @return self
     */
    public function setParticipantVersionId($participant_version_id)
    {
        if (is_null($participant_version_id)) {
            throw new \InvalidArgumentException('non-nullable participant_version_id cannot be null');
        }
        $this->container['participant_version_id'] = $participant_version_id;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \SdkWhatsappWebMultiDevice\Model\Participant[]|null
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \SdkWhatsappWebMultiDevice\Model\Participant[]|null $participants participants
     *
     * @return self
     */
    public function setParticipants($participants)
    {
        if (is_null($participants)) {
            throw new \InvalidArgumentException('non-nullable participants cannot be null');
        }
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets member_add_mode
     *
     * @return string|null
     */
    public function getMemberAddMode()
    {
        return $this->container['member_add_mode'];
    }

    /**
     * Sets member_add_mode
     *
     * @param string|null $member_add_mode member_add_mode
     *
     * @return self
     */
    public function setMemberAddMode($member_add_mode)
    {
        if (is_null($member_add_mode)) {
            throw new \InvalidArgumentException('non-nullable member_add_mode cannot be null');
        }
        $this->container['member_add_mode'] = $member_add_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


