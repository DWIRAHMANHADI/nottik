<?php
/**
 * NewsletterThreadMetadata
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  SdkWhatsappWebMultiDevice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhatsApp API MultiDevice
 *
 * This API is used for sending whatsapp via API
 *
 * The version of the OpenAPI document: 5.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SdkWhatsappWebMultiDevice\Model;

use \ArrayAccess;
use \SdkWhatsappWebMultiDevice\ObjectSerializer;

/**
 * NewsletterThreadMetadata Class Doc Comment
 *
 * @category Class
 * @package  SdkWhatsappWebMultiDevice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NewsletterThreadMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Newsletter_thread_metadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'creation_time' => 'string',
        'invite' => 'string',
        'name' => '\SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataName',
        'description' => '\SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataDescription',
        'subscribers_count' => 'string',
        'verification' => 'string',
        'picture' => '\SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataPicture',
        'preview' => '\SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataPreview',
        'settings' => '\SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'creation_time' => null,
        'invite' => null,
        'name' => null,
        'description' => null,
        'subscribers_count' => null,
        'verification' => null,
        'picture' => null,
        'preview' => null,
        'settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'creation_time' => false,
        'invite' => false,
        'name' => false,
        'description' => false,
        'subscribers_count' => false,
        'verification' => false,
        'picture' => false,
        'preview' => false,
        'settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creation_time' => 'creation_time',
        'invite' => 'invite',
        'name' => 'name',
        'description' => 'description',
        'subscribers_count' => 'subscribers_count',
        'verification' => 'verification',
        'picture' => 'picture',
        'preview' => 'preview',
        'settings' => 'settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creation_time' => 'setCreationTime',
        'invite' => 'setInvite',
        'name' => 'setName',
        'description' => 'setDescription',
        'subscribers_count' => 'setSubscribersCount',
        'verification' => 'setVerification',
        'picture' => 'setPicture',
        'preview' => 'setPreview',
        'settings' => 'setSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creation_time' => 'getCreationTime',
        'invite' => 'getInvite',
        'name' => 'getName',
        'description' => 'getDescription',
        'subscribers_count' => 'getSubscribersCount',
        'verification' => 'getVerification',
        'picture' => 'getPicture',
        'preview' => 'getPreview',
        'settings' => 'getSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('invite', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('subscribers_count', $data ?? [], null);
        $this->setIfExists('verification', $data ?? [], null);
        $this->setIfExists('picture', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creation_time
     *
     * @return string|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string|null $creation_time creation_time
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            throw new \InvalidArgumentException('non-nullable creation_time cannot be null');
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets invite
     *
     * @return string|null
     */
    public function getInvite()
    {
        return $this->container['invite'];
    }

    /**
     * Sets invite
     *
     * @param string|null $invite invite
     *
     * @return self
     */
    public function setInvite($invite)
    {
        if (is_null($invite)) {
            throw new \InvalidArgumentException('non-nullable invite cannot be null');
        }
        $this->container['invite'] = $invite;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataName|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataName|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataDescription|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataDescription|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets subscribers_count
     *
     * @return string|null
     */
    public function getSubscribersCount()
    {
        return $this->container['subscribers_count'];
    }

    /**
     * Sets subscribers_count
     *
     * @param string|null $subscribers_count subscribers_count
     *
     * @return self
     */
    public function setSubscribersCount($subscribers_count)
    {
        if (is_null($subscribers_count)) {
            throw new \InvalidArgumentException('non-nullable subscribers_count cannot be null');
        }
        $this->container['subscribers_count'] = $subscribers_count;

        return $this;
    }

    /**
     * Gets verification
     *
     * @return string|null
     */
    public function getVerification()
    {
        return $this->container['verification'];
    }

    /**
     * Sets verification
     *
     * @param string|null $verification verification
     *
     * @return self
     */
    public function setVerification($verification)
    {
        if (is_null($verification)) {
            throw new \InvalidArgumentException('non-nullable verification cannot be null');
        }
        $this->container['verification'] = $verification;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataPicture|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataPicture|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {
        if (is_null($picture)) {
            throw new \InvalidArgumentException('non-nullable picture cannot be null');
        }
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataPreview|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataPreview|null $preview preview
     *
     * @return self
     */
    public function setPreview($preview)
    {
        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataSettings|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \SdkWhatsappWebMultiDevice\Model\NewsletterThreadMetadataSettings|null $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


